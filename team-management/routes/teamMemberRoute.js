const express = require('express');
const mongoose = require('mongoose');
const router = express.Router();
const TeamMember = require("../models/TeamMember")


//R√©cup√©rer tous les membres d'√©quipe
router.get('/', async (req, res) => {
    try {
        const members = await TeamMember.find()
        res.status(200).json(members);
        } catch (err) {
        res.status(500).json({ message: err.message });
    }
});


// R√©cup√©rer tous les membres d'une √©quipe sp√©cifique
router.get('/team/:teamId', async (req, res) => {
    try {
        const { teamId } = req.params;

        // V√©rifier si l'ID est pr√©sent
        if (!teamId) {
            return res.status(400).json({ message: "ID d'√©quipe manquant." });
        }

        // Chercher tous les membres de cette √©quipe
        const members = await TeamMember.find({ team: teamId }).populate('user');

        // Renvoyer la liste des membres
        res.status(200).json(members);
    } catch (err) {
        // G√©rer les erreurs
        res.status(500).json({ message: err.message });
    }
});

// R√©cup√©rer un membre sp√©cifique par ID avec les informations de l'√©quipe
router.get('/:id', async (req, res) => {
    try {
        const { id } = req.params;
        // V√©rifier si l'ID est pr√©sent
        if (!id) {
            return res.status(400).json({ message: "ID manquant." });
        }
        // Chercher le membre dans la base de donn√©es et inclure les informations de l'√©quipe
        const member = await TeamMember.findById(id).populate('team');
        // V√©rifier si le membre existe
        if (!member) {
            return res.status(404).json({ message: "Membre non trouv√©." });
        }
        // Renvoyer les informations du membre avec les informations de l'√©quipe
        res.status(200).json(member);
    } catch (err) {
        // G√©rer les erreurs
        res.status(500).json({ message: err.message });
    }
});

// V√©rifier si le membre existe d√©j√† dans l'√©quipe avant de l'ajouter
router.post('/', async (req, res) => {
    try {
        console.log('Received request body:', req.body);
        const { team, user, role, userType } = req.body;
        console.log('Extracted data:', { team, user, role, userType });
        console.log('Team ID type:', typeof team, 'value:', team);
        console.log('User ID type:', typeof user, 'value:', user);

        // V√©rifier si les IDs sont pr√©sents
        if (!team || !user) {
            return res.status(400).json({ message: "ID de l'√©quipe ou de l'utilisateur manquant." });
        }

        // V√©rifier si le r√¥le est valide (admin ou membre)
        const validRoles = ["admin", "membre"];
        if (!validRoles.includes(role)) {
            return res.status(400).json({ message: "R√¥le invalide." });
        }

        // V√©rifier si le type d'utilisateur est valide (√©tudiant ou enseignant)
        const validUserTypes = ["etudiant", "enseignant"];
        if (!validUserTypes.includes(userType)) {
            return res.status(400).json({ message: "Type d'utilisateur invalide." });
        }

        // üîç V√©rifier si ce membre est d√©j√† dans cette √©quipe
        const existingMember = await TeamMember.findOne({ team, user });
        if (existingMember) {
            return res.status(400).json({ message: "Ce membre est d√©j√† dans l'√©quipe." });
        }

        // V√©rifier s'il y a d√©j√† un admin dans l'√©quipe si le r√¥le est admin
        if (role === "admin") {
            const isAlreadyAdmin = await TeamMember.findOne({ team, role: "admin" });
            if (isAlreadyAdmin) {
                return res.status(400).json({ message: "Il y a d√©j√† un admin pour cette √©quipe." });
            }
        }

        // Ajouter le nouveau membre avec les donn√©es correctes
        const newMember = new TeamMember({
            team: team,
            user: user,
            role,
            userType
        });

        // Sauvegarder le membre dans la base de donn√©es
        const savedMember = await newMember.save();

        // R√©pondre avec le membre ajout√©
        res.status(201).json(savedMember);
    } catch (err) {
        // Gestion d'erreurs serveur
        res.status(500).json({ message: err.message });
    }
});


// Supprimer un membre d'√©quipe
router.delete('/:id', async (req, res) => {
    try {
        const { id } = req.params;

        // V√©rification si l'ID est pr√©sent
        if (!id) {
            return res.status(400).json({ message: "ID manquant." });
        }

        // Chercher le membre √† supprimer
        const deletedMember = await TeamMember.findByIdAndDelete(id);

        // Si le membre n'est pas trouv√©, renvoyer une erreur
        if (!deletedMember) {
            return res.status(404).json({ message: "Membre non trouv√©." });
        }

        // Retourner une r√©ponse de succ√®s
        res.status(200).json({ message: "Membre supprim√© avec succ√®s." });
    } catch (err) {
        // Gestion des erreurs serveur
        res.status(500).json({ message: err.message });
    }
});

module.exports = router;
